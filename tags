!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCHITECTURE_ID	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
AssignmentWeight	CNF.cc	/^  std::pair<long, bool> CNFFormula::AssignmentWeight($/;"	f	class:CNF::CNFFormula
BOOL_FLAGS	util.cc	/^  static std::unordered_map<string, Flag<bool>> BOOL_FLAGS;$/;"	m	namespace:util	file:
BruteForce	local-search.cc	/^  VariableAssignment BruteForce(const CNFFormula& cnf_formula) {$/;"	f	namespace:CNF
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/Users\/bilalSaad\/ws\/bernd_sat\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.6.3\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/bilalSaad\/ws\/bernd_sat$/;"	m
CNF	CNF.cc	/^namespace CNF {$/;"	n	file:
CNF	CNF.h	/^namespace CNF {$/;"	n
CNF	local-search.cc	/^namespace CNF {$/;"	n	file:
CNF	local-search.h	/^namespace CNF {$/;"	n
CNFClause	CNF.h	/^struct CNFClause {$/;"	s	namespace:CNF
CNFFormula	CNF.h	/^    CNFFormula(int num_vars, int num_clauses):num_vars(num_vars),$/;"	f	class:CNF::CNFFormula
CNFFormula	CNF.h	/^class CNFFormula {$/;"	c	namespace:CNF
CNFLiteral	CNF.h	/^  CNFLiteral(int id, bool is_complement): id(id), is_complement(is_complement)$/;"	f	struct:CNF::CNFLiteral
CNFLiteral	CNF.h	/^struct CNFLiteral {$/;"	s	namespace:CNF
COMPILER_ID	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
C_DIALECT	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
DEC	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DEFINE_bool	util.h	/^#define DEFINE_bool(/;"	d
DEFINE_int	util.h	/^#define DEFINE_int(/;"	d
DEFINE_string	util.h	/^#define DEFINE_string(/;"	d
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
Flag	util.cc	/^     struct Flag {$/;"	s	namespace:util	file:
HEX	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
ID_VOID_MAIN	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
INT_FLAGS	util.cc	/^  static std::unordered_map<string, Flag<int>> INT_FLAGS;$/;"	m	namespace:util	file:
JumpToLine	CNF.h.html	/^function JumpToLine()$/;"	f
LocalSearch	local-search.cc	/^  VariableAssignment LocalSearch(const CNFFormula& cnf_formula, int max_steps) {$/;"	f	namespace:CNF
NumVars	CNF.h	/^    int NumVars() const {return num_vars;}$/;"	f	class:CNF::CNFFormula
PLATFORM_ID	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PrintAssignment	CNF.cc	/^  std::ostream& PrintAssignment(std::ostream& os, const VariableAssignment& ass,$/;"	f	namespace:CNF
RM	build/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.6.3\/bin\/cmake -E remove -f$/;"	m
RandomVariableAssignment	CNF.cc	/^  VariableAssignment RandomVariableAssignment(int k) {$/;"	f	namespace:CNF
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
STRINGIFY	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
STRING_FLAGS	util.cc	/^    STRING_FLAGS;$/;"	m	namespace:util	file:
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
UTIL_H	util.h	/^#define UTIL_H$/;"	d
__CNF_H__	CNF.h	/^#define __CNF_H__$/;"	d
__LOCAL_SEARCH_H_	local-search.h	/^#define __LOCAL_SEARCH_H_$/;"	d
add_bool_flag	util.cc	/^  void add_bool_flag(const string& fname, const string& desc, bool v) {$/;"	f	namespace:util
add_int_flag	util.cc	/^  void add_int_flag(const string& fname, const string& desc, int v) {$/;"	f	namespace:util
add_string_flag	util.cc	/^  void add_string_flag(const string& fname, const string& desc, string v) {$/;"	f	namespace:util
brute_force_helper	local-search.cc	/^  VariableAssignment brute_force_helper(VariableAssignment& ass,$/;"	f	namespace:CNF::__anon4
build_random_clauses	CNF.cc	/^  std::vector<CNFClause> build_random_clauses(int num_vars, int num_clauses) {$/;"	f	namespace:CNF
check_clause	CNF.cc	/^    bool check_clause(const CNFClause& clause,$/;"	f	namespace:CNF::__anon1
clause_weight	CNF.h	/^    std::function<long(const CNFClause& clause)> clause_weight =$/;"	m	class:CNF::CNFFormula
clauses	CNF.h	/^    std::vector<CNFClause> clauses;$/;"	m	class:CNF::CNFFormula
const	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
db	util.h	/^#define db /;"	d
description	util.cc	/^       string description;$/;"	m	struct:util::Flag	file:
features	build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
flip_variable	local-search.cc	/^  void flip_variable(VariableAssignment& ass) {$/;"	f	namespace:CNF::__anon3
get_bool_flag	util.cc	/^  bool get_bool_flag(const string& fname) {$/;"	f	namespace:util
get_int_flag	util.cc	/^  int get_int_flag(const string& fname) {$/;"	f	namespace:util
get_string_flag	util.cc	/^  string get_string_flag(const string& fname) {$/;"	f	namespace:util
id	CNF.h	/^  int id;$/;"	m	struct:CNF::CNFLiteral
info_arch	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
is_complement	CNF.h	/^  bool is_complement;$/;"	m	struct:CNF::CNFLiteral
is_set	util.cc	/^       bool is_set;$/;"	m	struct:util::Flag	file:
main	CNF_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
mkflag	util.h	/^#define mkflag(/;"	d
name	util.h	/^      std::string name;$/;"	m	class:util::scoped_timer
num_vars	CNF.h	/^    int num_vars;$/;"	m	class:CNF::CNFFormula
operator <<	CNF.cc	/^  std::ostream& operator<<(std::ostream& os, const CNFClause& c) {$/;"	f	namespace:CNF
operator <<	CNF.cc	/^  std::ostream& operator<<(std::ostream& os, const CNFFormula& cnf) {$/;"	f	namespace:CNF
operator <<	CNF.cc	/^  std::ostream& operator<<(std::ostream& os, const CNFLiteral& v) {$/;"	f	namespace:CNF
parse_flags	util.cc	/^  void parse_flags(int argc, char** argv) {$/;"	f	namespace:util
qnxnto	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.6.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
random_CNS_clause	CNF.cc	/^    CNFClause random_CNS_clause(int num_vars) {$/;"	f	namespace:CNF::__anon2
random_real	util.cc	/^   double random_real() {$/;"	f	namespace:util
scoped_timer	util.h	/^      scoped_timer(const std::string& s = ""): start_time(Clock::now()),$/;"	f	class:util::scoped_timer
scoped_timer	util.h	/^  class scoped_timer {$/;"	c	namespace:util
start_time	util.h	/^      time_point<Clock> start_time; $/;"	m	class:util::scoped_timer
util	util.cc	/^namespace util {$/;"	n	file:
util	util.h	/^namespace util {$/;"	n
val	util.cc	/^       T val;$/;"	m	struct:util::Flag	file:
vars	CNF.h	/^  std::vector<CNFLiteral> vars;$/;"	m	struct:CNF::CNFClause
volatile	build/CMakeFiles/3.6.3/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
~scoped_timer	util.h	/^      ~scoped_timer() {$/;"	f	class:util::scoped_timer
